/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query UsersetGroups @api(name: userset) {\n    userGroups {\n        items {\n            id\n            name\n        }\n    }\n  }\n": types.UsersetGroupsDocument,
    "\n    mutation UsersetEnableUser($id: ID!, $enabled: Boolean!) @api(name: userset) {\n        updateUser(id: $id, input: {enabled: $enabled}) {id}\n    }\n\n    mutation UsersetEnableUser03($id0: ID!, $id1: ID!, $id2: ID!, $enabled: Boolean!) @api(name: userset) {\n        a0: updateUser(id: $id0, input: {enabled: $enabled}) {id}\n        a1: updateUser(id: $id1, input: {enabled: $enabled}) {id}\n        a2: updateUser(id: $id2, input: {enabled: $enabled}) {id}\n    }\n\n    mutation UsersetEnableUser10($id0: ID!, $id1: ID!, $id2: ID!, $id3: ID!, $id4: ID!, $id5: ID!, $id6: ID!, $id7: ID!, $id8: ID!, $id9: ID!, $enabled: Boolean!) @api(name: userset) {\n        a0: updateUser(id: $id0, input: {enabled: $enabled}) {id}\n        a1: updateUser(id: $id1, input: {enabled: $enabled}) {id}\n        a2: updateUser(id: $id2, input: {enabled: $enabled}) {id}\n        a3: updateUser(id: $id3, input: {enabled: $enabled}) {id}\n        a4: updateUser(id: $id4, input: {enabled: $enabled}) {id}\n        a5: updateUser(id: $id5, input: {enabled: $enabled}) {id}\n        a6: updateUser(id: $id6, input: {enabled: $enabled}) {id}\n        a7: updateUser(id: $id7, input: {enabled: $enabled}) {id}\n        a8: updateUser(id: $id8, input: {enabled: $enabled}) {id}\n        a9: updateUser(id: $id9, input: {enabled: $enabled}) {id}\n    }\n\n    mutation UsersetEnableUser30(\n        $id0: ID!, $id1: ID!, $id2: ID!, $id3: ID!, $id4: ID!, $id5: ID!, $id6: ID!, $id7: ID!, $id8: ID!, $id9: ID!,\n        $id10: ID!, $id11: ID!, $id12: ID!, $id13: ID!, $id14: ID!, $id15: ID!, $id16: ID!, $id17: ID!, $id18: ID!, $id19: ID!,\n        $id20: ID!, $id21: ID!, $id22: ID!, $id23: ID!, $id24: ID!, $id25: ID!, $id26: ID!, $id27: ID!, $id28: ID!, $id29: ID!,\n        $enabled: Boolean!) @api(name: userset) {\n        a0: updateUser(id: $id0, input: {enabled: $enabled}) {id}\n        a1: updateUser(id: $id1, input: {enabled: $enabled}) {id}\n        a2: updateUser(id: $id2, input: {enabled: $enabled}) {id}\n        a3: updateUser(id: $id3, input: {enabled: $enabled}) {id}\n        a4: updateUser(id: $id4, input: {enabled: $enabled}) {id}\n        a5: updateUser(id: $id5, input: {enabled: $enabled}) {id}\n        a6: updateUser(id: $id6, input: {enabled: $enabled}) {id}\n        a7: updateUser(id: $id7, input: {enabled: $enabled}) {id}\n        a8: updateUser(id: $id8, input: {enabled: $enabled}) {id}\n        a9: updateUser(id: $id9, input: {enabled: $enabled}) {id}\n        a10: updateUser(id: $id10, input: {enabled: $enabled}) {id}\n        a11: updateUser(id: $id11, input: {enabled: $enabled}) {id}\n        a12: updateUser(id: $id12, input: {enabled: $enabled}) {id}\n        a13: updateUser(id: $id13, input: {enabled: $enabled}) {id}\n        a14: updateUser(id: $id14, input: {enabled: $enabled}) {id}\n        a15: updateUser(id: $id15, input: {enabled: $enabled}) {id}\n        a16: updateUser(id: $id16, input: {enabled: $enabled}) {id}\n        a17: updateUser(id: $id17, input: {enabled: $enabled}) {id}\n        a18: updateUser(id: $id18, input: {enabled: $enabled}) {id}\n        a19: updateUser(id: $id19, input: {enabled: $enabled}) {id}\n        a20: updateUser(id: $id20, input: {enabled: $enabled}) {id}\n        a21: updateUser(id: $id21, input: {enabled: $enabled}) {id}\n        a22: updateUser(id: $id22, input: {enabled: $enabled}) {id}\n        a23: updateUser(id: $id23, input: {enabled: $enabled}) {id}\n        a24: updateUser(id: $id24, input: {enabled: $enabled}) {id}\n        a25: updateUser(id: $id25, input: {enabled: $enabled}) {id}\n        a26: updateUser(id: $id26, input: {enabled: $enabled}) {id}\n        a27: updateUser(id: $id27, input: {enabled: $enabled}) {id}\n        a28: updateUser(id: $id28, input: {enabled: $enabled}) {id}\n        a29: updateUser(id: $id29, input: {enabled: $enabled}) {id}\n    }\n": types.UsersetEnableUserDocument,
    "\n    query UsersetUserIdList($filter: UserFilter) @api(name: userset) {\n        users(filter: $filter) {\n            items {\n                id\n            }\n        }\n    }\n\n    query UsersetUserExcel($filter: UserFilter) @api(name: userset) {\n        users(filter: $filter) {\n            items {\n                id\n                username\n                firstName\n                enabled\n                createdAt\n                properties\n            }\n        }\n    }\n": types.UsersetUserIdListDocument,
    "\n    query UsersetUserList($filter: UserFilter, $pageable: UserPageable) @api(name: userset) {\n        users(filter: $filter, pageable: $pageable) {\n            items {\n                id\n                ...UserListItem\n            }\n            pageInfo {\n                page\n                size\n                totalPages\n                totalItems\n            }\n        }\n    }\n": types.UsersetUserListDocument,
    "\n        fragment UserListItem on User {\n            id\n            enabled\n            username\n            firstName\n            createdAt\n            properties\n        }\n    ": types.UserListItemFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UsersetGroups @api(name: userset) {\n    userGroups {\n        items {\n            id\n            name\n        }\n    }\n  }\n"): (typeof documents)["\n  query UsersetGroups @api(name: userset) {\n    userGroups {\n        items {\n            id\n            name\n        }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UsersetEnableUser($id: ID!, $enabled: Boolean!) @api(name: userset) {\n        updateUser(id: $id, input: {enabled: $enabled}) {id}\n    }\n\n    mutation UsersetEnableUser03($id0: ID!, $id1: ID!, $id2: ID!, $enabled: Boolean!) @api(name: userset) {\n        a0: updateUser(id: $id0, input: {enabled: $enabled}) {id}\n        a1: updateUser(id: $id1, input: {enabled: $enabled}) {id}\n        a2: updateUser(id: $id2, input: {enabled: $enabled}) {id}\n    }\n\n    mutation UsersetEnableUser10($id0: ID!, $id1: ID!, $id2: ID!, $id3: ID!, $id4: ID!, $id5: ID!, $id6: ID!, $id7: ID!, $id8: ID!, $id9: ID!, $enabled: Boolean!) @api(name: userset) {\n        a0: updateUser(id: $id0, input: {enabled: $enabled}) {id}\n        a1: updateUser(id: $id1, input: {enabled: $enabled}) {id}\n        a2: updateUser(id: $id2, input: {enabled: $enabled}) {id}\n        a3: updateUser(id: $id3, input: {enabled: $enabled}) {id}\n        a4: updateUser(id: $id4, input: {enabled: $enabled}) {id}\n        a5: updateUser(id: $id5, input: {enabled: $enabled}) {id}\n        a6: updateUser(id: $id6, input: {enabled: $enabled}) {id}\n        a7: updateUser(id: $id7, input: {enabled: $enabled}) {id}\n        a8: updateUser(id: $id8, input: {enabled: $enabled}) {id}\n        a9: updateUser(id: $id9, input: {enabled: $enabled}) {id}\n    }\n\n    mutation UsersetEnableUser30(\n        $id0: ID!, $id1: ID!, $id2: ID!, $id3: ID!, $id4: ID!, $id5: ID!, $id6: ID!, $id7: ID!, $id8: ID!, $id9: ID!,\n        $id10: ID!, $id11: ID!, $id12: ID!, $id13: ID!, $id14: ID!, $id15: ID!, $id16: ID!, $id17: ID!, $id18: ID!, $id19: ID!,\n        $id20: ID!, $id21: ID!, $id22: ID!, $id23: ID!, $id24: ID!, $id25: ID!, $id26: ID!, $id27: ID!, $id28: ID!, $id29: ID!,\n        $enabled: Boolean!) @api(name: userset) {\n        a0: updateUser(id: $id0, input: {enabled: $enabled}) {id}\n        a1: updateUser(id: $id1, input: {enabled: $enabled}) {id}\n        a2: updateUser(id: $id2, input: {enabled: $enabled}) {id}\n        a3: updateUser(id: $id3, input: {enabled: $enabled}) {id}\n        a4: updateUser(id: $id4, input: {enabled: $enabled}) {id}\n        a5: updateUser(id: $id5, input: {enabled: $enabled}) {id}\n        a6: updateUser(id: $id6, input: {enabled: $enabled}) {id}\n        a7: updateUser(id: $id7, input: {enabled: $enabled}) {id}\n        a8: updateUser(id: $id8, input: {enabled: $enabled}) {id}\n        a9: updateUser(id: $id9, input: {enabled: $enabled}) {id}\n        a10: updateUser(id: $id10, input: {enabled: $enabled}) {id}\n        a11: updateUser(id: $id11, input: {enabled: $enabled}) {id}\n        a12: updateUser(id: $id12, input: {enabled: $enabled}) {id}\n        a13: updateUser(id: $id13, input: {enabled: $enabled}) {id}\n        a14: updateUser(id: $id14, input: {enabled: $enabled}) {id}\n        a15: updateUser(id: $id15, input: {enabled: $enabled}) {id}\n        a16: updateUser(id: $id16, input: {enabled: $enabled}) {id}\n        a17: updateUser(id: $id17, input: {enabled: $enabled}) {id}\n        a18: updateUser(id: $id18, input: {enabled: $enabled}) {id}\n        a19: updateUser(id: $id19, input: {enabled: $enabled}) {id}\n        a20: updateUser(id: $id20, input: {enabled: $enabled}) {id}\n        a21: updateUser(id: $id21, input: {enabled: $enabled}) {id}\n        a22: updateUser(id: $id22, input: {enabled: $enabled}) {id}\n        a23: updateUser(id: $id23, input: {enabled: $enabled}) {id}\n        a24: updateUser(id: $id24, input: {enabled: $enabled}) {id}\n        a25: updateUser(id: $id25, input: {enabled: $enabled}) {id}\n        a26: updateUser(id: $id26, input: {enabled: $enabled}) {id}\n        a27: updateUser(id: $id27, input: {enabled: $enabled}) {id}\n        a28: updateUser(id: $id28, input: {enabled: $enabled}) {id}\n        a29: updateUser(id: $id29, input: {enabled: $enabled}) {id}\n    }\n"): (typeof documents)["\n    mutation UsersetEnableUser($id: ID!, $enabled: Boolean!) @api(name: userset) {\n        updateUser(id: $id, input: {enabled: $enabled}) {id}\n    }\n\n    mutation UsersetEnableUser03($id0: ID!, $id1: ID!, $id2: ID!, $enabled: Boolean!) @api(name: userset) {\n        a0: updateUser(id: $id0, input: {enabled: $enabled}) {id}\n        a1: updateUser(id: $id1, input: {enabled: $enabled}) {id}\n        a2: updateUser(id: $id2, input: {enabled: $enabled}) {id}\n    }\n\n    mutation UsersetEnableUser10($id0: ID!, $id1: ID!, $id2: ID!, $id3: ID!, $id4: ID!, $id5: ID!, $id6: ID!, $id7: ID!, $id8: ID!, $id9: ID!, $enabled: Boolean!) @api(name: userset) {\n        a0: updateUser(id: $id0, input: {enabled: $enabled}) {id}\n        a1: updateUser(id: $id1, input: {enabled: $enabled}) {id}\n        a2: updateUser(id: $id2, input: {enabled: $enabled}) {id}\n        a3: updateUser(id: $id3, input: {enabled: $enabled}) {id}\n        a4: updateUser(id: $id4, input: {enabled: $enabled}) {id}\n        a5: updateUser(id: $id5, input: {enabled: $enabled}) {id}\n        a6: updateUser(id: $id6, input: {enabled: $enabled}) {id}\n        a7: updateUser(id: $id7, input: {enabled: $enabled}) {id}\n        a8: updateUser(id: $id8, input: {enabled: $enabled}) {id}\n        a9: updateUser(id: $id9, input: {enabled: $enabled}) {id}\n    }\n\n    mutation UsersetEnableUser30(\n        $id0: ID!, $id1: ID!, $id2: ID!, $id3: ID!, $id4: ID!, $id5: ID!, $id6: ID!, $id7: ID!, $id8: ID!, $id9: ID!,\n        $id10: ID!, $id11: ID!, $id12: ID!, $id13: ID!, $id14: ID!, $id15: ID!, $id16: ID!, $id17: ID!, $id18: ID!, $id19: ID!,\n        $id20: ID!, $id21: ID!, $id22: ID!, $id23: ID!, $id24: ID!, $id25: ID!, $id26: ID!, $id27: ID!, $id28: ID!, $id29: ID!,\n        $enabled: Boolean!) @api(name: userset) {\n        a0: updateUser(id: $id0, input: {enabled: $enabled}) {id}\n        a1: updateUser(id: $id1, input: {enabled: $enabled}) {id}\n        a2: updateUser(id: $id2, input: {enabled: $enabled}) {id}\n        a3: updateUser(id: $id3, input: {enabled: $enabled}) {id}\n        a4: updateUser(id: $id4, input: {enabled: $enabled}) {id}\n        a5: updateUser(id: $id5, input: {enabled: $enabled}) {id}\n        a6: updateUser(id: $id6, input: {enabled: $enabled}) {id}\n        a7: updateUser(id: $id7, input: {enabled: $enabled}) {id}\n        a8: updateUser(id: $id8, input: {enabled: $enabled}) {id}\n        a9: updateUser(id: $id9, input: {enabled: $enabled}) {id}\n        a10: updateUser(id: $id10, input: {enabled: $enabled}) {id}\n        a11: updateUser(id: $id11, input: {enabled: $enabled}) {id}\n        a12: updateUser(id: $id12, input: {enabled: $enabled}) {id}\n        a13: updateUser(id: $id13, input: {enabled: $enabled}) {id}\n        a14: updateUser(id: $id14, input: {enabled: $enabled}) {id}\n        a15: updateUser(id: $id15, input: {enabled: $enabled}) {id}\n        a16: updateUser(id: $id16, input: {enabled: $enabled}) {id}\n        a17: updateUser(id: $id17, input: {enabled: $enabled}) {id}\n        a18: updateUser(id: $id18, input: {enabled: $enabled}) {id}\n        a19: updateUser(id: $id19, input: {enabled: $enabled}) {id}\n        a20: updateUser(id: $id20, input: {enabled: $enabled}) {id}\n        a21: updateUser(id: $id21, input: {enabled: $enabled}) {id}\n        a22: updateUser(id: $id22, input: {enabled: $enabled}) {id}\n        a23: updateUser(id: $id23, input: {enabled: $enabled}) {id}\n        a24: updateUser(id: $id24, input: {enabled: $enabled}) {id}\n        a25: updateUser(id: $id25, input: {enabled: $enabled}) {id}\n        a26: updateUser(id: $id26, input: {enabled: $enabled}) {id}\n        a27: updateUser(id: $id27, input: {enabled: $enabled}) {id}\n        a28: updateUser(id: $id28, input: {enabled: $enabled}) {id}\n        a29: updateUser(id: $id29, input: {enabled: $enabled}) {id}\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query UsersetUserIdList($filter: UserFilter) @api(name: userset) {\n        users(filter: $filter) {\n            items {\n                id\n            }\n        }\n    }\n\n    query UsersetUserExcel($filter: UserFilter) @api(name: userset) {\n        users(filter: $filter) {\n            items {\n                id\n                username\n                firstName\n                enabled\n                createdAt\n                properties\n            }\n        }\n    }\n"): (typeof documents)["\n    query UsersetUserIdList($filter: UserFilter) @api(name: userset) {\n        users(filter: $filter) {\n            items {\n                id\n            }\n        }\n    }\n\n    query UsersetUserExcel($filter: UserFilter) @api(name: userset) {\n        users(filter: $filter) {\n            items {\n                id\n                username\n                firstName\n                enabled\n                createdAt\n                properties\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query UsersetUserList($filter: UserFilter, $pageable: UserPageable) @api(name: userset) {\n        users(filter: $filter, pageable: $pageable) {\n            items {\n                id\n                ...UserListItem\n            }\n            pageInfo {\n                page\n                size\n                totalPages\n                totalItems\n            }\n        }\n    }\n"): (typeof documents)["\n    query UsersetUserList($filter: UserFilter, $pageable: UserPageable) @api(name: userset) {\n        users(filter: $filter, pageable: $pageable) {\n            items {\n                id\n                ...UserListItem\n            }\n            pageInfo {\n                page\n                size\n                totalPages\n                totalItems\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        fragment UserListItem on User {\n            id\n            enabled\n            username\n            firstName\n            createdAt\n            properties\n        }\n    "): (typeof documents)["\n        fragment UserListItem on User {\n            id\n            enabled\n            username\n            firstName\n            createdAt\n            properties\n        }\n    "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;