/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query SymbolGroup($id: ID!) {\n  symbolGroup(id: $id) {\n    id\n    name\n    order\n    count\n    enabled\n    collapsed\n    access\n    symbols {\n      id\n      name\n      files {\n        id\n        contentType\n        contentSize\n        download\n        thumbnail {\n          filename\n          contentType\n          download\n        }\n      }\n    }\n  }\n}\n\nquery SymbolGroups {\n  symbolGroups {\n    id\n    name\n    order\n    count\n    enabled\n    collapsed\n    access\n  }\n}\n\nquery SYMBOLGROUPPAGED($filter: SymbolGroupFilterInput, $pageable: SymbolGroupPageable) {\n  symbolGroupsPaged(filter: $filter, pageable: $pageable) {\n    items {\n      id\n      name\n      description\n      order\n      count\n      enabled\n      collapsed\n      access\n      createdBy\n      createdAt\n      updatedBy\n      updatedAt\n      symbols {\n        id\n        name\n        createdBy\n        createdAt\n        updatedBy\n        updatedAt\n      }\n    }\n    pageInfo {\n      totalPages\n      totalItems\n      page\n      size\n      hasNextPage\n      hasPreviousPage\n    }\n  }\n}\n\nquery SYMBOL($id: ID!) {\n  symbol(id: $id) {\n    id\n    name\n    group {\n      id\n      name\n    }\n    files {\n      id\n      filename\n      download\n      contentSize\n      width\n      height\n    }\n  }\n}\n\nquery SYMBOLS($filter: SymbolFilterInput, $pageable: SymbolPageable) {\n  symbols(filter: $filter, pageable: $pageable) {\n    items {\n      id\n      name\n      files {\n        id\n        filename\n        contentType\n        contentSize\n        download\n        thumbnail {\n          filename\n          contentType\n          download\n        }\n      }\n    }\n    pageInfo {\n      totalPages\n      totalItems\n      page\n      size\n      hasNextPage\n      hasPreviousPage\n    }\n  }\n}": types.SymbolGroupDocument,
    "mutation createSymbolGroup($input: CreateSymbolGroupInput!) {\n  createSymbolGroup(input: $input) {\n    id\n    name\n    description\n    order\n    enabled\n    collapsed\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n  }\n}\n\nmutation updateSymbolGroup($id: ID!, $input: UpdateSymbolGroupInput!) {\n  updateSymbolGroup(id: $id, input: $input) {\n    id\n    name\n    description\n    order\n    enabled\n    collapsed\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n  }\n}\n\nmutation deleteSymbolGroup($id: [ID!]!) {\n  deleteSymbolGroup(id: $id)\n}\n\nmutation createSymbol($input: CreateSymbolInput!) {\n  createSymbol(input: $input) {\n    id\n    name\n  }\n}\n\nmutation deleteSymbol($id: [ID!]!) {\n  deleteSymbol(id: $id)\n}\n\nmutation updateSymbol($id: ID!, $input: UpdateSymbolInput!) {\n  updateSymbol(id: $id, input: $input) {\n    id\n    name\n  }\n}\n\nmutation deleteSymbolFile($id: [ID!]!) {\n  deleteSymbolFile(id: $id)\n}": types.CreateSymbolGroupDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SymbolGroup($id: ID!) {\n  symbolGroup(id: $id) {\n    id\n    name\n    order\n    count\n    enabled\n    collapsed\n    access\n    symbols {\n      id\n      name\n      files {\n        id\n        contentType\n        contentSize\n        download\n        thumbnail {\n          filename\n          contentType\n          download\n        }\n      }\n    }\n  }\n}\n\nquery SymbolGroups {\n  symbolGroups {\n    id\n    name\n    order\n    count\n    enabled\n    collapsed\n    access\n  }\n}\n\nquery SYMBOLGROUPPAGED($filter: SymbolGroupFilterInput, $pageable: SymbolGroupPageable) {\n  symbolGroupsPaged(filter: $filter, pageable: $pageable) {\n    items {\n      id\n      name\n      description\n      order\n      count\n      enabled\n      collapsed\n      access\n      createdBy\n      createdAt\n      updatedBy\n      updatedAt\n      symbols {\n        id\n        name\n        createdBy\n        createdAt\n        updatedBy\n        updatedAt\n      }\n    }\n    pageInfo {\n      totalPages\n      totalItems\n      page\n      size\n      hasNextPage\n      hasPreviousPage\n    }\n  }\n}\n\nquery SYMBOL($id: ID!) {\n  symbol(id: $id) {\n    id\n    name\n    group {\n      id\n      name\n    }\n    files {\n      id\n      filename\n      download\n      contentSize\n      width\n      height\n    }\n  }\n}\n\nquery SYMBOLS($filter: SymbolFilterInput, $pageable: SymbolPageable) {\n  symbols(filter: $filter, pageable: $pageable) {\n    items {\n      id\n      name\n      files {\n        id\n        filename\n        contentType\n        contentSize\n        download\n        thumbnail {\n          filename\n          contentType\n          download\n        }\n      }\n    }\n    pageInfo {\n      totalPages\n      totalItems\n      page\n      size\n      hasNextPage\n      hasPreviousPage\n    }\n  }\n}"): (typeof documents)["query SymbolGroup($id: ID!) {\n  symbolGroup(id: $id) {\n    id\n    name\n    order\n    count\n    enabled\n    collapsed\n    access\n    symbols {\n      id\n      name\n      files {\n        id\n        contentType\n        contentSize\n        download\n        thumbnail {\n          filename\n          contentType\n          download\n        }\n      }\n    }\n  }\n}\n\nquery SymbolGroups {\n  symbolGroups {\n    id\n    name\n    order\n    count\n    enabled\n    collapsed\n    access\n  }\n}\n\nquery SYMBOLGROUPPAGED($filter: SymbolGroupFilterInput, $pageable: SymbolGroupPageable) {\n  symbolGroupsPaged(filter: $filter, pageable: $pageable) {\n    items {\n      id\n      name\n      description\n      order\n      count\n      enabled\n      collapsed\n      access\n      createdBy\n      createdAt\n      updatedBy\n      updatedAt\n      symbols {\n        id\n        name\n        createdBy\n        createdAt\n        updatedBy\n        updatedAt\n      }\n    }\n    pageInfo {\n      totalPages\n      totalItems\n      page\n      size\n      hasNextPage\n      hasPreviousPage\n    }\n  }\n}\n\nquery SYMBOL($id: ID!) {\n  symbol(id: $id) {\n    id\n    name\n    group {\n      id\n      name\n    }\n    files {\n      id\n      filename\n      download\n      contentSize\n      width\n      height\n    }\n  }\n}\n\nquery SYMBOLS($filter: SymbolFilterInput, $pageable: SymbolPageable) {\n  symbols(filter: $filter, pageable: $pageable) {\n    items {\n      id\n      name\n      files {\n        id\n        filename\n        contentType\n        contentSize\n        download\n        thumbnail {\n          filename\n          contentType\n          download\n        }\n      }\n    }\n    pageInfo {\n      totalPages\n      totalItems\n      page\n      size\n      hasNextPage\n      hasPreviousPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createSymbolGroup($input: CreateSymbolGroupInput!) {\n  createSymbolGroup(input: $input) {\n    id\n    name\n    description\n    order\n    enabled\n    collapsed\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n  }\n}\n\nmutation updateSymbolGroup($id: ID!, $input: UpdateSymbolGroupInput!) {\n  updateSymbolGroup(id: $id, input: $input) {\n    id\n    name\n    description\n    order\n    enabled\n    collapsed\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n  }\n}\n\nmutation deleteSymbolGroup($id: [ID!]!) {\n  deleteSymbolGroup(id: $id)\n}\n\nmutation createSymbol($input: CreateSymbolInput!) {\n  createSymbol(input: $input) {\n    id\n    name\n  }\n}\n\nmutation deleteSymbol($id: [ID!]!) {\n  deleteSymbol(id: $id)\n}\n\nmutation updateSymbol($id: ID!, $input: UpdateSymbolInput!) {\n  updateSymbol(id: $id, input: $input) {\n    id\n    name\n  }\n}\n\nmutation deleteSymbolFile($id: [ID!]!) {\n  deleteSymbolFile(id: $id)\n}"): (typeof documents)["mutation createSymbolGroup($input: CreateSymbolGroupInput!) {\n  createSymbolGroup(input: $input) {\n    id\n    name\n    description\n    order\n    enabled\n    collapsed\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n  }\n}\n\nmutation updateSymbolGroup($id: ID!, $input: UpdateSymbolGroupInput!) {\n  updateSymbolGroup(id: $id, input: $input) {\n    id\n    name\n    description\n    order\n    enabled\n    collapsed\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n  }\n}\n\nmutation deleteSymbolGroup($id: [ID!]!) {\n  deleteSymbolGroup(id: $id)\n}\n\nmutation createSymbol($input: CreateSymbolInput!) {\n  createSymbol(input: $input) {\n    id\n    name\n  }\n}\n\nmutation deleteSymbol($id: [ID!]!) {\n  deleteSymbol(id: $id)\n}\n\nmutation updateSymbol($id: ID!, $input: UpdateSymbolInput!) {\n  updateSymbol(id: $id, input: $input) {\n    id\n    name\n  }\n}\n\nmutation deleteSymbolFile($id: [ID!]!) {\n  deleteSymbolFile(id: $id)\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;