/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation LayersetCreateGroup($input: CreateGroupInput!) @api(name: layerset) {\n  createGroup(input: $input) {\n    id\n  }\n}\n\nmutation LayersetUpdateGroup($id: ID!, $input: UpdateGroupInput!) @api(name: layerset) {\n  updateGroup(id: $id, input: $input) {\n    id\n    name\n    description\n    enabled\n    access\n    published\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation LayersetDeleteGroup($id: ID!) @api(name: layerset) {\n  deleteGroup(ids: [$id])\n}\n\nmutation LayersetLocateGroup($id: ID!, $input: LocateGroupInput!) @api(name: layerset) {\n  locateGroup(id: $id, input: $input) {\n    id\n  }\n}\n\nmutation LayersetCreateAsset($input: CreateAssetInput!) @api(name: layerset) {\n  createAsset(input: $input) {\n    id\n    name\n    description\n    enabled\n    access\n    status\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation LayersetUpdateAsset($id: ID!, $input: UpdateAssetInput!) @api(name: layerset) {\n  updateAsset(id: $id, input: $input) {\n    id\n    name\n    description\n    order\n    type\n    enabled\n    visible\n    access\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation LayersetDeleteAsset($ids: ID!) @api(name: layerset) {\n  deleteAsset(ids: [$ids])\n}\n\nmutation LayersetLocateAsset($input: LocateAssetInput!) @api(name: layerset) {\n  locateAsset(input: $input) {\n    id\n  }\n}\n\nmutation LayersetReloadRemoteAsset($layerKey: String!) @api(name: layerset) {\n  reloadRemoteAsset(layerKey: $layerKey)\n}": types.LayersetCreateGroupDocument,
    "query LayersetGroupList @api(name: layerset) {\n  groups {\n    id\n    name\n    enabled\n    access\n  }\n}\n\nfragment LayersetGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  access\n  order\n  collapsed\n  createdAt\n  updatedAt\n}\n\nfragment LayersetAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  access\n  status\n  createdAt\n  updatedAt\n}\n\nquery LayersetGroupListWithAsset @api(name: layerset) {\n  groups {\n    ...LayersetGroupBasic\n    assets {\n      ...LayersetAssetBasic\n    }\n  }\n}\n\nquery LayersetAsset($id: ID!) @api(name: layerset) {\n  asset(id: $id) {\n    ...LayersetAssetBasic\n    properties\n    groups {\n      id\n      name\n    }\n    logs {\n      id\n      assetId\n      type\n      content\n      createdAt\n      updatedAt\n    }\n    styles {\n      id\n      name\n      defaultStatus\n      context\n    }\n  }\n}\n\nfragment layerGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  published\n  collapsed\n  access\n  order\n}\n\nfragment layerAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  order\n  access\n  createdAt\n  updatedAt\n}\n\nquery layerGroups($filter: GroupFilterInput) {\n  groups(filter: $filter) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery layerAsset($id: ID!) {\n  asset(id: $id) {\n    id\n    name\n    description\n    type\n    enabled\n    visible\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n    properties\n  }\n}\n\nquery layerGroup($id: ID!) @api(name: layerset) {\n  group(id: $id) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery remote($href: String!) @api(name: layerset) {\n  remote(href: $href)\n}\n\nquery classifyAttribute($nativeName: String!, $attribute: String!) @api(name: layerset) {\n  classifyAttribute(nativeName: $nativeName, attribute: $attribute) {\n    type\n    rules {\n      min\n      max\n      eq\n      color\n    }\n  }\n}": types.LayersetGroupListDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation LayersetCreateGroup($input: CreateGroupInput!) @api(name: layerset) {\n  createGroup(input: $input) {\n    id\n  }\n}\n\nmutation LayersetUpdateGroup($id: ID!, $input: UpdateGroupInput!) @api(name: layerset) {\n  updateGroup(id: $id, input: $input) {\n    id\n    name\n    description\n    enabled\n    access\n    published\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation LayersetDeleteGroup($id: ID!) @api(name: layerset) {\n  deleteGroup(ids: [$id])\n}\n\nmutation LayersetLocateGroup($id: ID!, $input: LocateGroupInput!) @api(name: layerset) {\n  locateGroup(id: $id, input: $input) {\n    id\n  }\n}\n\nmutation LayersetCreateAsset($input: CreateAssetInput!) @api(name: layerset) {\n  createAsset(input: $input) {\n    id\n    name\n    description\n    enabled\n    access\n    status\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation LayersetUpdateAsset($id: ID!, $input: UpdateAssetInput!) @api(name: layerset) {\n  updateAsset(id: $id, input: $input) {\n    id\n    name\n    description\n    order\n    type\n    enabled\n    visible\n    access\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation LayersetDeleteAsset($ids: ID!) @api(name: layerset) {\n  deleteAsset(ids: [$ids])\n}\n\nmutation LayersetLocateAsset($input: LocateAssetInput!) @api(name: layerset) {\n  locateAsset(input: $input) {\n    id\n  }\n}\n\nmutation LayersetReloadRemoteAsset($layerKey: String!) @api(name: layerset) {\n  reloadRemoteAsset(layerKey: $layerKey)\n}"): (typeof documents)["mutation LayersetCreateGroup($input: CreateGroupInput!) @api(name: layerset) {\n  createGroup(input: $input) {\n    id\n  }\n}\n\nmutation LayersetUpdateGroup($id: ID!, $input: UpdateGroupInput!) @api(name: layerset) {\n  updateGroup(id: $id, input: $input) {\n    id\n    name\n    description\n    enabled\n    access\n    published\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation LayersetDeleteGroup($id: ID!) @api(name: layerset) {\n  deleteGroup(ids: [$id])\n}\n\nmutation LayersetLocateGroup($id: ID!, $input: LocateGroupInput!) @api(name: layerset) {\n  locateGroup(id: $id, input: $input) {\n    id\n  }\n}\n\nmutation LayersetCreateAsset($input: CreateAssetInput!) @api(name: layerset) {\n  createAsset(input: $input) {\n    id\n    name\n    description\n    enabled\n    access\n    status\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation LayersetUpdateAsset($id: ID!, $input: UpdateAssetInput!) @api(name: layerset) {\n  updateAsset(id: $id, input: $input) {\n    id\n    name\n    description\n    order\n    type\n    enabled\n    visible\n    access\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation LayersetDeleteAsset($ids: ID!) @api(name: layerset) {\n  deleteAsset(ids: [$ids])\n}\n\nmutation LayersetLocateAsset($input: LocateAssetInput!) @api(name: layerset) {\n  locateAsset(input: $input) {\n    id\n  }\n}\n\nmutation LayersetReloadRemoteAsset($layerKey: String!) @api(name: layerset) {\n  reloadRemoteAsset(layerKey: $layerKey)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query LayersetGroupList @api(name: layerset) {\n  groups {\n    id\n    name\n    enabled\n    access\n  }\n}\n\nfragment LayersetGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  access\n  order\n  collapsed\n  createdAt\n  updatedAt\n}\n\nfragment LayersetAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  access\n  status\n  createdAt\n  updatedAt\n}\n\nquery LayersetGroupListWithAsset @api(name: layerset) {\n  groups {\n    ...LayersetGroupBasic\n    assets {\n      ...LayersetAssetBasic\n    }\n  }\n}\n\nquery LayersetAsset($id: ID!) @api(name: layerset) {\n  asset(id: $id) {\n    ...LayersetAssetBasic\n    properties\n    groups {\n      id\n      name\n    }\n    logs {\n      id\n      assetId\n      type\n      content\n      createdAt\n      updatedAt\n    }\n    styles {\n      id\n      name\n      defaultStatus\n      context\n    }\n  }\n}\n\nfragment layerGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  published\n  collapsed\n  access\n  order\n}\n\nfragment layerAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  order\n  access\n  createdAt\n  updatedAt\n}\n\nquery layerGroups($filter: GroupFilterInput) {\n  groups(filter: $filter) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery layerAsset($id: ID!) {\n  asset(id: $id) {\n    id\n    name\n    description\n    type\n    enabled\n    visible\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n    properties\n  }\n}\n\nquery layerGroup($id: ID!) @api(name: layerset) {\n  group(id: $id) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery remote($href: String!) @api(name: layerset) {\n  remote(href: $href)\n}\n\nquery classifyAttribute($nativeName: String!, $attribute: String!) @api(name: layerset) {\n  classifyAttribute(nativeName: $nativeName, attribute: $attribute) {\n    type\n    rules {\n      min\n      max\n      eq\n      color\n    }\n  }\n}"): (typeof documents)["query LayersetGroupList @api(name: layerset) {\n  groups {\n    id\n    name\n    enabled\n    access\n  }\n}\n\nfragment LayersetGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  access\n  order\n  collapsed\n  createdAt\n  updatedAt\n}\n\nfragment LayersetAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  access\n  status\n  createdAt\n  updatedAt\n}\n\nquery LayersetGroupListWithAsset @api(name: layerset) {\n  groups {\n    ...LayersetGroupBasic\n    assets {\n      ...LayersetAssetBasic\n    }\n  }\n}\n\nquery LayersetAsset($id: ID!) @api(name: layerset) {\n  asset(id: $id) {\n    ...LayersetAssetBasic\n    properties\n    groups {\n      id\n      name\n    }\n    logs {\n      id\n      assetId\n      type\n      content\n      createdAt\n      updatedAt\n    }\n    styles {\n      id\n      name\n      defaultStatus\n      context\n    }\n  }\n}\n\nfragment layerGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  published\n  collapsed\n  access\n  order\n}\n\nfragment layerAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  order\n  access\n  createdAt\n  updatedAt\n}\n\nquery layerGroups($filter: GroupFilterInput) {\n  groups(filter: $filter) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery layerAsset($id: ID!) {\n  asset(id: $id) {\n    id\n    name\n    description\n    type\n    enabled\n    visible\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n    properties\n  }\n}\n\nquery layerGroup($id: ID!) @api(name: layerset) {\n  group(id: $id) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery remote($href: String!) @api(name: layerset) {\n  remote(href: $href)\n}\n\nquery classifyAttribute($nativeName: String!, $attribute: String!) @api(name: layerset) {\n  classifyAttribute(nativeName: $nativeName, attribute: $attribute) {\n    type\n    rules {\n      min\n      max\n      eq\n      color\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;