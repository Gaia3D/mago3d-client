/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    mutation LayersetCreateGroup($input: CreateGroupInput!) @api(name: layerset) {\n        createGroup(input: $input) {\n            id\n        }\n    }\n\n    mutation LayersetUpdateGroup($id:ID!, $input: UpdateGroupInput!) @api(name: layerset) {\n        updateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            enabled\n            access\n            published\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n\n    mutation LayersetDeleteGroup($id: ID!) @api(name: layerset) {\n        deleteGroup (\n            ids: [$id]\n        )\n    }\n\n\n    mutation LayersetLocateGroup($id:ID!, $input: LocateGroupInput!) @api(name: layerset) {\n        locateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n        }\n    }\n\n    mutation LayersetCreateAsset($input: CreateAssetInput!) @api(name: layerset) {\n        createAsset(input: $input) {\n            id\n            name\n            description\n            enabled\n            access\n            status\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n\n    mutation LayersetUpdateAsset($id:ID!, $input: UpdateAssetInput!) @api(name: layerset) {\n        updateAsset (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            order\n            type\n            enabled\n            visible\n            access\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n\n    mutation LayersetDeleteAsset($ids:ID!) @api(name: layerset) {\n        deleteAsset (\n            ids: [$ids]\n        )\n    }\n\n    mutation LayersetLocateAsset($input: LocateAssetInput!) @api(name: layerset) {\n        locateAsset (input: $input) {\n            id\n        }\n    }\n\n    mutation LayersetReloadRemoteAsset($layerKey:String!) @api(name: layerset) {\n        reloadRemoteAsset (\n            layerKey: $layerKey\n        )\n    }\n": types.LayersetCreateGroupDocument,
    "\n    mutation CREATE_LAYERGROUP($input:CreateGroupInput!) @api(name: layerset) {\n        createGroup (\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            enabled\n            published\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n": types.Create_LayergroupDocument,
    "\n    mutation UPDATE_LAYERGROUP($id:ID!, $input: UpdateGroupInput!) {\n        updateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            enabled\n            published\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n": types.Update_LayergroupDocument,
    "\n    mutation DELETE_LAYERGROUP($id:ID!) {\n        deleteGroup (\n            ids: [$id]\n        )\n    }\n": types.Delete_LayergroupDocument,
    "\n    mutation CREATE_LAYERASSET($input:CreateAssetInput!) {\n        createAsset (\n            input: $input\n        )\n        {\n            id\n            name\n        }\n    }\n": types.Create_LayerassetDocument,
    "\n    mutation UPDATE_LAYERASSET($id:ID!, $input: UpdateAssetInput!) {\n        updateAsset (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            order\n            type\n            enabled\n            visible\n            access\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n": types.Update_LayerassetDocument,
    "\n    mutation LOCATE_GROUP($id:ID!, $input: LocateGroupInput!) {\n        locateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n        }\n    }\n": types.Locate_GroupDocument,
    "\n    mutation LOCATE_ASSET($input: LocateAssetInput!) {\n        locateAsset (\n            input: $input\n        )\n        {\n            id\n        }\n    }\n": types.Locate_AssetDocument,
    "\n    mutation DELETE_ASSET($ids:ID!) {\n        deleteAsset (\n            ids: [$ids]\n        )\n    }\n": types.Delete_AssetDocument,
    "\n    mutation RELOAD_REMOTE_ASSET($layerKey:String!) {\n        reloadRemoteAsset (\n            layerKey: $layerKey\n        )\n    }\n": types.Reload_Remote_AssetDocument,
    "\n    query Terrains {\n        terrains {\n            id\n            name\n            selected\n            properties\n        }\n    }\n    ": types.TerrainsDocument,
    "mutation createLayerGroup($input: CreateGroupInput!) @api(name: layerset) {\n  createGroup(input: $input) {\n    id\n    name\n    description\n    enabled\n    published\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation updateLayerGroup($id: ID!, $input: UpdateGroupInput!) @api(name: layerset) {\n  updateGroup(id: $id, input: $input) {\n    id\n    name\n    description\n    enabled\n    published\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation deleteLayerGroup($id: ID!) @api(name: layerset) {\n  deleteGroup(ids: [$id])\n}\n\nmutation createLayerAsset($input: CreateAssetInput!) @api(name: layerset) {\n  createAsset(input: $input) {\n    id\n    name\n  }\n}\n\nmutation updateLayerAsset($id: ID!, $input: UpdateAssetInput!) @api(name: layerset) {\n  updateAsset(id: $id, input: $input) {\n    id\n    name\n    description\n    order\n    type\n    enabled\n    visible\n    access\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation locateLayerGroup($id: ID!, $input: LocateGroupInput!) @api(name: layerset) {\n  locateGroup(id: $id, input: $input) {\n    id\n  }\n}\n\nmutation locateLayerAsset($input: LocateAssetInput!) @api(name: layerset) {\n  locateAsset(input: $input) {\n    id\n  }\n}\n\nmutation deleteLayerAsset($ids: ID!) @api(name: layerset) {\n  deleteAsset(ids: [$ids])\n}\n\nmutation reloadRemoteLayerAsset($layerKey: String!) @api(name: layerset) {\n  reloadRemoteAsset(layerKey: $layerKey)\n}\n\nmutation createLayerStyle($input: CreateStyleInput!) @api(name: layerset) {\n  createStyle(input: $input) {\n    id\n    name\n  }\n}\n\nmutation updateLayerStyle($id: ID!, $input: UpdateStyleInput!) @api(name: layerset) {\n  updateStyle(id: $id, input: $input) {\n    id\n    name\n    format\n    description\n    enabled\n    defaultStatus\n    access\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation deleteLayerStyle($id: ID!) @api(name: layerset) {\n  deleteStyle(ids: [$id])\n}\n\nmutation applyLayerStyle($id: ID!, $styleId: ID!) @api(name: layerset) {\n  applyAssetStyle(id: $id, styleId: $styleId) {\n    id\n    name\n    styles {\n      id\n      name\n    }\n  }\n}": types.CreateLayerGroupDocument,
    "query LayersetGroupList @api(name: layerset) {\n  groups {\n    id\n    name\n    enabled\n    access\n  }\n}\n\nfragment LayersetGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  access\n  order\n  collapsed\n  createdAt\n  updatedAt\n}\n\nfragment LayersetAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  access\n  status\n  createdAt\n  updatedAt\n}\n\nquery LayersetGroupListWithAsset @api(name: layerset) {\n  groups {\n    ...LayersetGroupBasic\n    assets {\n      ...LayersetAssetBasic\n    }\n  }\n}\n\nquery GroupById($id: ID!) @api(name: layerset) {\n  group(id: $id) {\n    id\n    name\n    description\n    order\n    enabled\n    published\n    collapsed\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n  }\n}\n\nquery LayersetAsset($id: ID!) @api(name: layerset) {\n  asset(id: $id) {\n    ...LayersetAssetBasic\n    properties\n    groups {\n      id\n      name\n    }\n    logs {\n      id\n      assetId\n      type\n      content\n      createdAt\n      updatedAt\n    }\n    styles {\n      id\n      name\n      defaultStatus\n      context\n    }\n  }\n}\n\nfragment layerGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  published\n  collapsed\n  access\n  order\n}\n\nfragment layerAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  order\n  access\n  createdAt\n  updatedAt\n}\n\nquery layerGroups($filter: GroupFilterInput) {\n  groups(filter: $filter) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery layerAsset($id: ID!) {\n  asset(id: $id) {\n    id\n    name\n    description\n    type\n    enabled\n    visible\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n    properties\n  }\n}\n\nquery layerGroup($id: ID!) @api(name: layerset) {\n  group(id: $id) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery remote($href: String!) @api(name: layerset) {\n  remote(href: $href)\n}\n\nquery classifyAttribute($nativeName: String!, $attribute: String!) @api(name: layerset) {\n  classifyAttribute(nativeName: $nativeName, attribute: $attribute) {\n    type\n    rules {\n      min\n      max\n      eq\n      color\n    }\n  }\n}": types.LayersetGroupListDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation LayersetCreateGroup($input: CreateGroupInput!) @api(name: layerset) {\n        createGroup(input: $input) {\n            id\n        }\n    }\n\n    mutation LayersetUpdateGroup($id:ID!, $input: UpdateGroupInput!) @api(name: layerset) {\n        updateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            enabled\n            access\n            published\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n\n    mutation LayersetDeleteGroup($id: ID!) @api(name: layerset) {\n        deleteGroup (\n            ids: [$id]\n        )\n    }\n\n\n    mutation LayersetLocateGroup($id:ID!, $input: LocateGroupInput!) @api(name: layerset) {\n        locateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n        }\n    }\n\n    mutation LayersetCreateAsset($input: CreateAssetInput!) @api(name: layerset) {\n        createAsset(input: $input) {\n            id\n            name\n            description\n            enabled\n            access\n            status\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n\n    mutation LayersetUpdateAsset($id:ID!, $input: UpdateAssetInput!) @api(name: layerset) {\n        updateAsset (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            order\n            type\n            enabled\n            visible\n            access\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n\n    mutation LayersetDeleteAsset($ids:ID!) @api(name: layerset) {\n        deleteAsset (\n            ids: [$ids]\n        )\n    }\n\n    mutation LayersetLocateAsset($input: LocateAssetInput!) @api(name: layerset) {\n        locateAsset (input: $input) {\n            id\n        }\n    }\n\n    mutation LayersetReloadRemoteAsset($layerKey:String!) @api(name: layerset) {\n        reloadRemoteAsset (\n            layerKey: $layerKey\n        )\n    }\n"): (typeof documents)["\n    mutation LayersetCreateGroup($input: CreateGroupInput!) @api(name: layerset) {\n        createGroup(input: $input) {\n            id\n        }\n    }\n\n    mutation LayersetUpdateGroup($id:ID!, $input: UpdateGroupInput!) @api(name: layerset) {\n        updateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            enabled\n            access\n            published\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n\n    mutation LayersetDeleteGroup($id: ID!) @api(name: layerset) {\n        deleteGroup (\n            ids: [$id]\n        )\n    }\n\n\n    mutation LayersetLocateGroup($id:ID!, $input: LocateGroupInput!) @api(name: layerset) {\n        locateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n        }\n    }\n\n    mutation LayersetCreateAsset($input: CreateAssetInput!) @api(name: layerset) {\n        createAsset(input: $input) {\n            id\n            name\n            description\n            enabled\n            access\n            status\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n\n    mutation LayersetUpdateAsset($id:ID!, $input: UpdateAssetInput!) @api(name: layerset) {\n        updateAsset (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            order\n            type\n            enabled\n            visible\n            access\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n\n    mutation LayersetDeleteAsset($ids:ID!) @api(name: layerset) {\n        deleteAsset (\n            ids: [$ids]\n        )\n    }\n\n    mutation LayersetLocateAsset($input: LocateAssetInput!) @api(name: layerset) {\n        locateAsset (input: $input) {\n            id\n        }\n    }\n\n    mutation LayersetReloadRemoteAsset($layerKey:String!) @api(name: layerset) {\n        reloadRemoteAsset (\n            layerKey: $layerKey\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CREATE_LAYERGROUP($input:CreateGroupInput!) @api(name: layerset) {\n        createGroup (\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            enabled\n            published\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n"): (typeof documents)["\n    mutation CREATE_LAYERGROUP($input:CreateGroupInput!) @api(name: layerset) {\n        createGroup (\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            enabled\n            published\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UPDATE_LAYERGROUP($id:ID!, $input: UpdateGroupInput!) {\n        updateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            enabled\n            published\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n"): (typeof documents)["\n    mutation UPDATE_LAYERGROUP($id:ID!, $input: UpdateGroupInput!) {\n        updateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            enabled\n            published\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DELETE_LAYERGROUP($id:ID!) {\n        deleteGroup (\n            ids: [$id]\n        )\n    }\n"): (typeof documents)["\n    mutation DELETE_LAYERGROUP($id:ID!) {\n        deleteGroup (\n            ids: [$id]\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CREATE_LAYERASSET($input:CreateAssetInput!) {\n        createAsset (\n            input: $input\n        )\n        {\n            id\n            name\n        }\n    }\n"): (typeof documents)["\n    mutation CREATE_LAYERASSET($input:CreateAssetInput!) {\n        createAsset (\n            input: $input\n        )\n        {\n            id\n            name\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UPDATE_LAYERASSET($id:ID!, $input: UpdateAssetInput!) {\n        updateAsset (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            order\n            type\n            enabled\n            visible\n            access\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n"): (typeof documents)["\n    mutation UPDATE_LAYERASSET($id:ID!, $input: UpdateAssetInput!) {\n        updateAsset (\n            id: $id\n            input: $input\n        )\n        {\n            id\n            name\n            description\n            order\n            type\n            enabled\n            visible\n            access\n            createdAt\n            createdBy\n            updatedAt\n            updatedBy\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation LOCATE_GROUP($id:ID!, $input: LocateGroupInput!) {\n        locateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n        }\n    }\n"): (typeof documents)["\n    mutation LOCATE_GROUP($id:ID!, $input: LocateGroupInput!) {\n        locateGroup (\n            id: $id\n            input: $input\n        )\n        {\n            id\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation LOCATE_ASSET($input: LocateAssetInput!) {\n        locateAsset (\n            input: $input\n        )\n        {\n            id\n        }\n    }\n"): (typeof documents)["\n    mutation LOCATE_ASSET($input: LocateAssetInput!) {\n        locateAsset (\n            input: $input\n        )\n        {\n            id\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DELETE_ASSET($ids:ID!) {\n        deleteAsset (\n            ids: [$ids]\n        )\n    }\n"): (typeof documents)["\n    mutation DELETE_ASSET($ids:ID!) {\n        deleteAsset (\n            ids: [$ids]\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation RELOAD_REMOTE_ASSET($layerKey:String!) {\n        reloadRemoteAsset (\n            layerKey: $layerKey\n        )\n    }\n"): (typeof documents)["\n    mutation RELOAD_REMOTE_ASSET($layerKey:String!) {\n        reloadRemoteAsset (\n            layerKey: $layerKey\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query Terrains {\n        terrains {\n            id\n            name\n            selected\n            properties\n        }\n    }\n    "): (typeof documents)["\n    query Terrains {\n        terrains {\n            id\n            name\n            selected\n            properties\n        }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createLayerGroup($input: CreateGroupInput!) @api(name: layerset) {\n  createGroup(input: $input) {\n    id\n    name\n    description\n    enabled\n    published\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation updateLayerGroup($id: ID!, $input: UpdateGroupInput!) @api(name: layerset) {\n  updateGroup(id: $id, input: $input) {\n    id\n    name\n    description\n    enabled\n    published\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation deleteLayerGroup($id: ID!) @api(name: layerset) {\n  deleteGroup(ids: [$id])\n}\n\nmutation createLayerAsset($input: CreateAssetInput!) @api(name: layerset) {\n  createAsset(input: $input) {\n    id\n    name\n  }\n}\n\nmutation updateLayerAsset($id: ID!, $input: UpdateAssetInput!) @api(name: layerset) {\n  updateAsset(id: $id, input: $input) {\n    id\n    name\n    description\n    order\n    type\n    enabled\n    visible\n    access\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation locateLayerGroup($id: ID!, $input: LocateGroupInput!) @api(name: layerset) {\n  locateGroup(id: $id, input: $input) {\n    id\n  }\n}\n\nmutation locateLayerAsset($input: LocateAssetInput!) @api(name: layerset) {\n  locateAsset(input: $input) {\n    id\n  }\n}\n\nmutation deleteLayerAsset($ids: ID!) @api(name: layerset) {\n  deleteAsset(ids: [$ids])\n}\n\nmutation reloadRemoteLayerAsset($layerKey: String!) @api(name: layerset) {\n  reloadRemoteAsset(layerKey: $layerKey)\n}\n\nmutation createLayerStyle($input: CreateStyleInput!) @api(name: layerset) {\n  createStyle(input: $input) {\n    id\n    name\n  }\n}\n\nmutation updateLayerStyle($id: ID!, $input: UpdateStyleInput!) @api(name: layerset) {\n  updateStyle(id: $id, input: $input) {\n    id\n    name\n    format\n    description\n    enabled\n    defaultStatus\n    access\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation deleteLayerStyle($id: ID!) @api(name: layerset) {\n  deleteStyle(ids: [$id])\n}\n\nmutation applyLayerStyle($id: ID!, $styleId: ID!) @api(name: layerset) {\n  applyAssetStyle(id: $id, styleId: $styleId) {\n    id\n    name\n    styles {\n      id\n      name\n    }\n  }\n}"): (typeof documents)["mutation createLayerGroup($input: CreateGroupInput!) @api(name: layerset) {\n  createGroup(input: $input) {\n    id\n    name\n    description\n    enabled\n    published\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation updateLayerGroup($id: ID!, $input: UpdateGroupInput!) @api(name: layerset) {\n  updateGroup(id: $id, input: $input) {\n    id\n    name\n    description\n    enabled\n    published\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation deleteLayerGroup($id: ID!) @api(name: layerset) {\n  deleteGroup(ids: [$id])\n}\n\nmutation createLayerAsset($input: CreateAssetInput!) @api(name: layerset) {\n  createAsset(input: $input) {\n    id\n    name\n  }\n}\n\nmutation updateLayerAsset($id: ID!, $input: UpdateAssetInput!) @api(name: layerset) {\n  updateAsset(id: $id, input: $input) {\n    id\n    name\n    description\n    order\n    type\n    enabled\n    visible\n    access\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation locateLayerGroup($id: ID!, $input: LocateGroupInput!) @api(name: layerset) {\n  locateGroup(id: $id, input: $input) {\n    id\n  }\n}\n\nmutation locateLayerAsset($input: LocateAssetInput!) @api(name: layerset) {\n  locateAsset(input: $input) {\n    id\n  }\n}\n\nmutation deleteLayerAsset($ids: ID!) @api(name: layerset) {\n  deleteAsset(ids: [$ids])\n}\n\nmutation reloadRemoteLayerAsset($layerKey: String!) @api(name: layerset) {\n  reloadRemoteAsset(layerKey: $layerKey)\n}\n\nmutation createLayerStyle($input: CreateStyleInput!) @api(name: layerset) {\n  createStyle(input: $input) {\n    id\n    name\n  }\n}\n\nmutation updateLayerStyle($id: ID!, $input: UpdateStyleInput!) @api(name: layerset) {\n  updateStyle(id: $id, input: $input) {\n    id\n    name\n    format\n    description\n    enabled\n    defaultStatus\n    access\n    createdAt\n    createdBy\n    updatedAt\n    updatedBy\n  }\n}\n\nmutation deleteLayerStyle($id: ID!) @api(name: layerset) {\n  deleteStyle(ids: [$id])\n}\n\nmutation applyLayerStyle($id: ID!, $styleId: ID!) @api(name: layerset) {\n  applyAssetStyle(id: $id, styleId: $styleId) {\n    id\n    name\n    styles {\n      id\n      name\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query LayersetGroupList @api(name: layerset) {\n  groups {\n    id\n    name\n    enabled\n    access\n  }\n}\n\nfragment LayersetGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  access\n  order\n  collapsed\n  createdAt\n  updatedAt\n}\n\nfragment LayersetAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  access\n  status\n  createdAt\n  updatedAt\n}\n\nquery LayersetGroupListWithAsset @api(name: layerset) {\n  groups {\n    ...LayersetGroupBasic\n    assets {\n      ...LayersetAssetBasic\n    }\n  }\n}\n\nquery GroupById($id: ID!) @api(name: layerset) {\n  group(id: $id) {\n    id\n    name\n    description\n    order\n    enabled\n    published\n    collapsed\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n  }\n}\n\nquery LayersetAsset($id: ID!) @api(name: layerset) {\n  asset(id: $id) {\n    ...LayersetAssetBasic\n    properties\n    groups {\n      id\n      name\n    }\n    logs {\n      id\n      assetId\n      type\n      content\n      createdAt\n      updatedAt\n    }\n    styles {\n      id\n      name\n      defaultStatus\n      context\n    }\n  }\n}\n\nfragment layerGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  published\n  collapsed\n  access\n  order\n}\n\nfragment layerAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  order\n  access\n  createdAt\n  updatedAt\n}\n\nquery layerGroups($filter: GroupFilterInput) {\n  groups(filter: $filter) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery layerAsset($id: ID!) {\n  asset(id: $id) {\n    id\n    name\n    description\n    type\n    enabled\n    visible\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n    properties\n  }\n}\n\nquery layerGroup($id: ID!) @api(name: layerset) {\n  group(id: $id) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery remote($href: String!) @api(name: layerset) {\n  remote(href: $href)\n}\n\nquery classifyAttribute($nativeName: String!, $attribute: String!) @api(name: layerset) {\n  classifyAttribute(nativeName: $nativeName, attribute: $attribute) {\n    type\n    rules {\n      min\n      max\n      eq\n      color\n    }\n  }\n}"): (typeof documents)["query LayersetGroupList @api(name: layerset) {\n  groups {\n    id\n    name\n    enabled\n    access\n  }\n}\n\nfragment LayersetGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  access\n  order\n  collapsed\n  createdAt\n  updatedAt\n}\n\nfragment LayersetAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  access\n  status\n  createdAt\n  updatedAt\n}\n\nquery LayersetGroupListWithAsset @api(name: layerset) {\n  groups {\n    ...LayersetGroupBasic\n    assets {\n      ...LayersetAssetBasic\n    }\n  }\n}\n\nquery GroupById($id: ID!) @api(name: layerset) {\n  group(id: $id) {\n    id\n    name\n    description\n    order\n    enabled\n    published\n    collapsed\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n  }\n}\n\nquery LayersetAsset($id: ID!) @api(name: layerset) {\n  asset(id: $id) {\n    ...LayersetAssetBasic\n    properties\n    groups {\n      id\n      name\n    }\n    logs {\n      id\n      assetId\n      type\n      content\n      createdAt\n      updatedAt\n    }\n    styles {\n      id\n      name\n      defaultStatus\n      context\n    }\n  }\n}\n\nfragment layerGroupBasic on LayerGroup {\n  id\n  name\n  description\n  enabled\n  published\n  collapsed\n  access\n  order\n}\n\nfragment layerAssetBasic on LayerAsset {\n  id\n  name\n  description\n  type\n  enabled\n  visible\n  order\n  access\n  createdAt\n  updatedAt\n}\n\nquery layerGroups($filter: GroupFilterInput) {\n  groups(filter: $filter) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery layerAsset($id: ID!) {\n  asset(id: $id) {\n    id\n    name\n    description\n    type\n    enabled\n    visible\n    access\n    createdBy\n    createdAt\n    updatedBy\n    updatedAt\n    properties\n  }\n}\n\nquery layerGroup($id: ID!) @api(name: layerset) {\n  group(id: $id) {\n    ...layerGroupBasic\n    assets {\n      ...layerAssetBasic\n      logs {\n        id\n        assetId\n        type\n        content\n      }\n    }\n  }\n}\n\nquery remote($href: String!) @api(name: layerset) {\n  remote(href: $href)\n}\n\nquery classifyAttribute($nativeName: String!, $attribute: String!) @api(name: layerset) {\n  classifyAttribute(nativeName: $nativeName, attribute: $attribute) {\n    type\n    rules {\n      min\n      max\n      eq\n      color\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;